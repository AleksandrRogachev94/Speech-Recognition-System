/*...........................................................................................................

strParSpProc,
strNeuron,strLay,strInpLay,strParFreqCorrSpectr,strPropNNW,strNNW,
strParAnSnd,strAnSnd,strAnSndArr,strAnalyseSound,
strRecSymb,strAnalyseData,
strWordDict,strDictionary,strRecognWord,strRecognAllWords

...........................................................................................................*/

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Способы анализа потока звуков.

#define methDecSnd_Inst  0 // Простейший способ, основанный на мгновенном значении.
#define methDecSnd_Store 1 // Метод с накоплением результата.

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Константы для параметров анализа потока звуков.

#define errSoundResNNW 0.4F // Допустимая ошибка при распознавании звука в простом методе принятия решения.
#define LevSoundDecStore 0.5F // Уровень принятия решения при распознавании звука в методе с учётом накопленного результата.

// Время накопления (c) для звуков.
#define tStVowel 0.5F // Время накопления (c) для гласных звуков.
#define tStSonor 0.3F // Время накопления (c) для сонорных звуков.
#define tStPulse 0.1F // Время накопления (c) для импульсных согласных звуков.
#define tStTurb  0.3F // Время накопления (c) для турбулентных согласных звуков.
#define tStHiss  0.3F // Время накопления (c) для шипящих согласных звуков.
#define tStHTone 0.3F // Время накопления (c) для шипяще-тоновых согласных звуков.
#define tStSilence 1.0F // Время накопления (c) для интервалов молчания.

// Веса накопленного и текущего результата распознавания при принятии решения в алгоритме распознавания символа.
#define weiStoreVowel 1.0F // Для гласных звуков.
#define weiInstVowel  1.0F // Для гласных звуков.

#define weiStoreSonor 1.0F // Для сонорных звуков.
#define weiInstSonor  1.0F // Для сонорных звуков.

#define weiStorePulse 1.0F // Для импульсных согласных звуков.
#define weiInstPulse  1.0F // Для импульсных согласных звуков.

#define weiStoreTurb 1.0F // Для турбулентных согласных звуков.
#define weiInstTurb  1.0F // Для турбулентных согласных звуков.

#define weiStoreHiss 1.0F // Для шипящих согласных звуков.
#define weiInstHiss  1.0F // Для шипящих согласных звуков.

#define weiStoreTone 1.0F // Для шипяще-тоновых согласных звуков.
#define weiInstTone  1.0F // Для шипяще-тоновых согласных звуков.

// Число накопления при распознавании символа в слове или команде.
#define nCntSymbVowel   8 // Число накопления звука для гласных звуков.
#define nCntSymbSonor   5 // Число накопления звука для сонорных звуков.
#define nCntSymbPulse   2 // Число накопления звука для импульсных согласных звуков.
#define nCntSymbTurb    5 // Число накопления звука для турбулентных согласных звуков.
#define nCntSymbHiss    5 // Число накопления звука для шипящих согласных звуков.
#define nCntSymbTone    5 // Число накопления звука для шипяще-тоновых согласных звуков.
#define nCntSymbSilence 10 // Число накопления звука для молчания.

#define nCntNoSymbVowel 3 // Число накопления допустимых ошибок при распознавании звука для гласных звуков.
#define nCntNoSymbSonor 3 // Число накопления допустимых ошибок при распознавании звука для сонорных звуков.
#define nCntNoSymbPulse 1 // Число накопления допустимых ошибок при распознавании звука для импульсных согласных звуков.
#define nCntNoSymbTurb  3 // Число накопления допустимых ошибок при распознавании звука для турбулентных согласных звуков.
#define nCntNoSymbHiss  2 // Число накопления допустимых ошибок при распознавании звука для шипящих согласных звуков.
#define nCntNoSymbTone  2 // Число накопления допустимых ошибок при распознавании звука для шипяще-тоновых согласных звуков.
#define nCntNoSymbSilence 3 // Число накопления допустимых ошибок при распознавании звука для шипяще-тоновых согласных звуков.

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Константы для алгоритма анализа и подачи команд.

#define TimePauseComm 2.0F // Пауза (с) между командами при подаче команд.

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Константы обработки.

#define Time_Width_Spectr_Stand 0.085F // Длительность временного окна (с) (cтандартное значение).
#define Time_Step_Spectr_Stand 0.005F // Шаг перемещения временного окна (с) (cтандартное значение).
#define nWinWid_Min 64 // Минимальная ширина временного окна в точках.

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Окна для спектрального преобразования в движущемся окне.

#define nTypMovWinSpectr 14 // Число типов окон.

#define methSpFour_Cos        0 // Косинусоидальное сглаживание (окно Тьюки) с параметром 0.5.
#define methSpFour_Hann       1 // Косинусоидальное сглаживание с параметром 0. (функция Ханна).
#define methSpFour_Hamming    2 // Окно Хэмминга.
#define methSpFour_Blackman   3 // Окно Блэкмена.
#define methSpFour_BlHarr     4 // Окно Блэкмена-Харриса.
#define methSpFour_KaisBess   5 // Окно Кайзера-Бесселя.
#define methSpFour_Natall     6 // Окно Наталла.
#define methSpFour_BlNatall   7 // Окно Блэкмена-Наталла.
#define methSpFour_FlatTop    8 // Окно с плоской вершиной.
#define methSpFour_Barlett    9 // Окно Барлетта.
#define methSpFour_BarHann   10 // Окно Барлетта-Ханна.
#define methSpFour_Lanczos   11 // Окно Ланкзоса.
#define methSpFour_Gauss     12 // Функция Гаусса.
#define methSpFour_NoWin     13 // Без сглаживания.

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Коэффициенты оконных функций.

#define coeWinCos 0.5F // Коэффициент окна с косинусоидальным сглаживанием.
#define coeWinKaisBess 4.54F // Коэффициент окна Кайзера-Бесселя.
#define coeWinGauss 0.3F // Коэффициент окна Гаусса.
#define coeWinDolphCheb 30.0F // Коэффициент окна Дольфа-Чебышева (ослабление лепестков дБ).

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Структура параметров спектральной обработки.

struct strParSpProc {

float Time_Width; // Ширина временного окна.
float Time_Step; // Шаг перемещения временного окна.
BYTE methSpFour; // Метод сглаживания временным окном.

strParSpProc(void); // Конструктор.
BYTE IsOK(void); // Проверки.
};

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// Структуры и классы для обработки методом нейронных сетей.

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Определение типов функций.

typedef double (*pFunAct)(double S); // Функция активации нейрона.

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Типы функции активации.

#define nTypFunAct 5 // Число типов функций.

#define TypFunAct_Sigm   0 // Сигмоидная функия.
#define TypFunAct_BiSigm 1 // Биполярная cигмоидная функия.
#define TypFunAct_HypTan 2 // Гиперболический тангенс.
#define TypFunAct_Log    3 // Логарифмическая.
#define TypFunAct_Lin    4 // Линейная.

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Структура нейрона.

struct strNeuron {

BYTE flTUse,flSmart; USHRT nWeights; double Val,T,*Weights,*Shifts;

strNeuron(void); // Конструктор.
~strNeuron(void); // Деструктор.
void Zero(void); // Обнуление идентификаторов и указателей.
void ZeroPar(void); // Обнуление идентификаторов.
void Free(void); // Удаление массива весов из памяти.
BYTE Alloc(USHRT nWeights_); // Выделение памяти для массива весов.
BYTE IsOK(void); // Проверки массива весов.
BYTE Read(FILE *file); // Чтение из файла.
};

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Структура слоя нейронов.

struct strLay {

BYTE TypFunAct,flTUse,flSmart; // Число нейронов, функция активации и флаг использования порогов и смещений.
USHRT n; // Число нейронов.
struct strNeuron *Neurons; // Массив структур нейронов.

strLay(void); // Конструктор.
~strLay(void); // Деструктор.
void Zero(void); // Обнуление идентификаторов и указателей.
void InitPar(void); // Инициализация или обнуление идентификаторов.
void Free(void); // Удаление объектов из памяти.
BYTE Alloc(USHRT n_); // Выделение памяти для массива структур нейронов.
BYTE IsOK(void); // Проверки.
strNeuron *Get(USHRT num); // Получение указателя на структуру нейрона.
BYTE Read(FILE *file); // Чтение из файла.
BYTE AllocWeights(USHRT nNeurPrev); // Выделение памяти для массивов весовых коэффициэнтов для каждого нейрона. 
};

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Структура входного слоя нейронов.

struct strInpLay {

USHRT n; double *Values;

strInpLay(void); // Конструктор.
~strInpLay(void); // Деструктор.
void Zero(void); // Обнуление идентификаторов и указателей.
void Free(void); // Удаление объектов из памяти.
BYTE Alloc(USHRT n_); // Выделение памяти для массива значений нейронов.
BYTE IsOK(void); // Проверки.
};

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Константы.

#define CorrDBFrCorr_Stand 20.0F // Усиление частотной коррекции (дБ).
#define FreqIniFrCorr_Stand 1500.0F // Частота (Гц), где начинается частотная коррекция - стандартное значение.
#define FreqFinFrCorr_Stand 2500.0F // Частота (Гц), где кончается частотная коррекция - стандартное значение.
#define AmpThr_Noice 2.0F // Амплитуда для пороговой фильтрации шума.

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Параметры частотной коррекции спектра.

struct strParFreqCorrSpectr {

float FrIni,FrFin; // Начало и конец интервала коррекции (Гц).
float CorrDB; // Величина частотной коррекции в дБ.

strParFreqCorrSpectr(void); // Конструктор.
void Init(void); // Инициализация параметров.
BYTE IsOK(void); // Проверки.
USHRT Check(void); // Проверки и коррекция.
BYTE Read(FILE *file); // Чтение из файла.
BYTE Write(FILE *file); // Запись в файл.
void SetDlg(HWND hDlg); // Установка в диалоговое окно.
BYTE GetDlg(HWND hDlg); // Получение из диалогового окна.
};

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Структура свойств и параметров нейронной сети.

struct strPropNNW {

BYTE flType; // Тип нейронной сети: (гласные, согласные, сразу всё - спектр).
BYTE flTypInpData; // Тип подачи данных на вход нейронной сети.
BYTE flFrCorr,typFrCorr; // Флаг и тип частотной коррекции.
BYTE flFrCompr,typFrCompr; // Флаг и тип частотного сжатия.
BYTE nPCons; // Число нейронов для спектральных линий согласных звуков.
float dFr; // Дискрет спектрального разложения (Гц).
float dFrTri; // Дискрет спектрального разложения по треугольным функциям (Гц).
float FreqMin; // Минимальная частота учитываемого спектрального интервала (Гц).
float FreqMax; // Максимальная частота учитываемого спектрального интервала (Гц).
struct strParFreqCorrSpectr FreqCorrSpectr; // Параметры частотной коррекции спектра.

strPropNNW(void); // Конструктор.
void Init(void); // Инициализация параметров.
BYTE Read(FILE *file); // Чтение из файла.
BYTE Write(FILE *file); // Запись в файл.
};

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Типы нейронных сетей.

#define typNNW_Spectr 2 // Применение нейронных сетей сразу для всего спектра.

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Типы подстановки данных.

#define typDataNNW_SpectrRow 3 // Непосредственно спектр.

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Структура всей нейронной сети.

struct strNNW {

BYTE typ; // Тип нейронной сети - для гласных или согласных.
BYTE nLay; // Число слоёв нейронов.
struct strInpLay InpLay; // Входной слой нейронной сети.
struct strLay *Layers; // Массив структур слоёв нейронов.
struct strPropNNW Par; // Структура свойств и параметров нейронной сети.
BYTE flOK; // Флаг наличия правильных весовых коэффициентов и порогов.

strNNW(void); // Конструктор.
~strNNW(void); // Деструктор.
void Zero(void); // Обнуление идентификаторов и указателей.
void Free(void); // Удаление объектов из памяти.
BYTE Alloc(BYTE nLay_); // Выделение памяти для массива структур слоёв нейронов.
BYTE IsOK(void); // Проверки.
BYTE IsOK_Lay(void); // Проверки включая слои.
strLay *Get(BYTE num); // Получение указателя на структуру слоя.
strLay *GetOutLay(void); // Получение указателя на структуру выходного слоя.
BYTE Read(FILE *file); // Чтение из файла.
BYTE Read_(char *fName); // Чтение из файла.
BYTE Read(char *Path,char *fName,char *ext); // Чтение из файла.
BYTE Compute(strInpLay *InpLay_); // Установка входного слоя и расчёт.
BYTE Compute_(BYTE layIn); // Расчёт начиная со слоя 'layIn'.
BYTE FreqCorrect(void); // Частотная коррекция входного массива.
};

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Определение типов функций для алгоритма распознавания.

typedef BYTE (*pFunDecSnd)(PNT_DATA Pnt,strLay *pLay,BYTE *numSnd); // Функция принятия решения при распознавании звука.

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Структура параметров для анализа потока данных для звука.

struct strParAnSnd {

char Symb; // Символ.
BYTE type; // Тип символа.
float tStore; // Время накопления сигнала.
float weiStore; // Коэффициент учёта накопленного сигнала.
float weiInst; // Коэффициент учёта текущего сигнала.
BYTE nCntSymb; // Число накопления звука.
BYTE nCntNoSymb; // Число накопления допустимых ошибок при распознавании звука.

BYTE IsOK(void); // Проверки.
};

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Структура для анализа потока данных для звука.

struct strAnSnd {

USHRT nBuf,cnt; float *Buf,weiStore,weiInst,coeWei; double sum;

strAnSnd(void); // Конструктор.
~strAnSnd(void); // Деструктор.
void Zero(void); // Обнуление указателей и инициализация параметров.
void Free(void); // Освобождение памяти.
BYTE Init(strParAnSnd *PAS,float tStep); // Инициализация.
BYTE IsOK(void); // Проверки.
BYTE Start(void); // Начало работы.
BYTE Step(float Val,float *pRes); // Шаг работы.
};

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Структура для анализа потока данных для нескольких звуков.

struct strAnSndArr {

BYTE nArr; struct strAnSnd *pArr;

strAnSndArr(void); // Конструктор.
~strAnSndArr(void); // Деструктор.
void Zero(void); // Обнуление указателей и инициализация параметров.
void Free(void); // Освобождение памяти.
void Clear(void); // Освобождение памяти в структурах.
BYTE Create(BYTE nArr_); // Создание массива.
BYTE IsOK(void); // Проверки массива структур.
BYTE Init(strParAnSnd *PAS,BYTE nPAS,float tStep,BYTE flNew); // Инициализация.
BYTE Start(void); // Начало работы.
BYTE Step(float *pVal,float *pRes,BYTE nVal); // Шаг работы.
};

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Структура для анализа потока данных.

struct strAnalyseSound {

float Res[nVoices]; // Массивы для хранения результатов распознавания.
struct strAnSndArr AnSnd; // Структуры для анализа потока данных.

BYTE Init(float tStep,BYTE flNew); // Инициализация.
BYTE Start(void); // Начало работы.
BYTE Step(float *pVal,BYTE nVal,BYTE *numSnd); // Шаг работы.
};

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Структура для распознавания одного символа.

struct strRecSymb {

USHRT cntSymp,cntNotSymb,N_CntSymb,N_CntNoSymb;

strRecSymb(void); // Конструктор.
void Zero(void); // Инициализация параметров.
void Init(USHRT NCntSymb,USHRT NCntNoSymb); // Инициализация.
void IncCntSymb(BYTE flag); // Приращение счётчика символа или отсутсвия символа.
};

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Структура для анализа потока данных.

struct strAnalyseData {

struct strRecSymb SymbArr[nVoices],NoSymb;

strAnalyseData(void); // Конструктор.
void Zero(void); // Обнуление параметров.
void Init(void); // Инициализация.
void Reset(void); // Сброс счётчиков.
BYTE GetSymb(BYTE numSnd,BYTE flClear); // Получение символа из потока.
};

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Структура слова в словаре.

struct strWordDict {

BYTE nTranscr; char *Word,**Transcr;

strWordDict(void); // Конструктор.
~strWordDict(void); // Деструктор.
void Zero(void); // Обнуление указателей и инициализация параметров.
void Free(void); // Освобождение памяти.
void FreeTranscr(void); // Освобождение памяти от транскрипций.
void ClearTranscr(void); // Удаление строк из памяти.
BYTE AllocTranscr(BYTE nTranscr_); // Выделение памяти для транскрипций.
BYTE IsOK_Transcr(void); // Проверки массива транскрипций.
char *Get(UINT num); // Получение строки транскрипции.
BYTE Read(FILE *file); // Чтение из файла.
};

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Структура словаря.

struct strDictionary {

UINT nWords; struct strWordDict *Words;

strDictionary(void); // Конструктор.
~strDictionary(void); // Деструктор.
void Zero(void); // Обнуление указателей и инициализация параметров.
void Free(void); // Освобождение памяти.
BYTE Alloc(UINT nWords_); // Выделение памяти.
BYTE IsOK(void); // Проверки массива.
strWordDict *Get(UINT num); // Получение структуры слова.
char *GetWord(UINT num); // Получение текста распознанного слова.
BYTE Read(char *Path,char *fName,char *ext); // Чтение из файла.
BYTE Read_(char *fName); // Чтение из файла.
BYTE Read(FILE *file); // Чтение из файла.
};

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Константы алгоритма.

#define PercWrongRecWord 0.2F // Максимально допустимая доля неправильно распознанных звуков в слове.
#define cntNSWord_Max 1 // Допустимое число неправильных символов в слове.

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Структура для распознавания транскрипции слова.

struct strRecognTranscr {

BYTE ln,cnt,cntNS,cntErr,cntErrM; char *pTr;

strRecognTranscr(void); // Конструктор.
void Zero(void); // Обнуление указателей и инициализация параметров.
BYTE Init(char *pTr_); // Инициализация.
void Start(void); // Начало работы.
BYTE Step(char Symb); // Шаг работы.
};

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Структура для распознавания слова.

struct strRecognWord {

BYTE nRecTr; struct strRecognTranscr *RecTr; struct strWordDict *pWD;

strRecognWord(void); // Конструктор.
~strRecognWord(void); // Деструктор.
void Zero(void); // Обнуление указателей и инициализация параметров.
void ZeroRT(void); // Обнуление указателей и инициализация параметров.
void FreeRT(void); // Освобождение памяти.
BYTE AllocRT(UINT nWords_); // Выделение памяти.
BYTE IsOK_RT(void); // Проверки массива.
BYTE Init(strWordDict *pWD_); // Инициализация.
BYTE Start(void); // Начало работы.
BYTE Step(char Symb); // Шаг работы.
};

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Структура для распознавания слов.

struct strRecognAllWords {

UINT nWords; struct strRecognWord *RecWords;

strRecognAllWords(void); // Конструктор.
~strRecognAllWords(void); // Деструктор.
void Zero(void); // Обнуление указателей и инициализация параметров.
void Free(void); // Освобождение памяти.
BYTE Alloc(UINT nWords_); // Выделение памяти.
BYTE IsOK(void); // Проверки массива.
BYTE Init(strDictionary *pDict); // Инициализация.
BYTE Start(void); // Начало работы.
BYTE Step(BYTE numSnd,UINT *numRec); // Шаг работы.
};
